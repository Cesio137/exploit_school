#include <QCoreApplication>
#include <QFile>
#include <QDir>
#include <QUrl>
#include <QDirIterator>
#include <QProcess>
#include <QStandardPaths>
#include <QDebug>
#include <iostream>
#include <string>

using namespace std;



void copyPath(QString src, QString dst)
{
    QDir dir(src);
    if (! dir.exists())
        return;

    foreach (QString d, dir.entryList(QDir::Dirs | QDir::NoDotAndDotDot)) {
        QString dst_path = dst + QDir::separator() + d;
        dir.mkpath(dst_path);
        copyPath(src+ QDir::separator() + d, dst_path);
    }

    foreach (QString f, dir.entryList(QDir::Files)) {
        QFile::copy(src + QDir::separator() + f, dst + QDir::separator() + f);
    }
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    //VAR
    QString rootDir = qApp->applicationDirPath();
    QString data = "/data";
    QDir mkDir;
    bool autostart = QDir(QDir::homePath()+"/.config/autostart").exists();
    QDir test(rootDir+data);
    QStringList testlist = test.entryList();
    QString Join = "";
    QString testout = testlist.join(Join);
    qDebug() << testout;

    if (autostart == true)
    {


    }
    else
    {
        mkDir.mkdir(QDir::homePath()+"/.config/autostart");

    }

    return 0;
}
